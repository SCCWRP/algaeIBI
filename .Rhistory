library(devtools)
install.packages("devtools")
library(devtools)
install.packages("RCurl")
install.packages("RCurl", type="source")
install.packages("RCurl", type="source")
install.packages("devtools")
library(devtools)
install_github("algaeMetrics", "mengeln")
library(algaeMetrics)
?algaeMetrics
?algae.IBIs
library(shiny)
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
?reactiveUI
runApp(".")
runApp(".")
runApp(".")
runApp(".")
grabMetaData()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
try(odbcDriverConnect("DRIVER={SQL Native Client};
SERVER=205.155.75.83,2866;UID=Read_Only;
DATABASE=DW_Full;Pwd=Read_Only"))
try(odbcDriverConnect("DRIVER={SQL Native Client};
SERVER=205.155.75.83,2866;UID=Read_Only;
DATABASE=DW_Full;Pwd=Read_Only"))
test <- try(odbcDriverConnect("DRIVER={SQL Native Client};
SERVER=205.155.75.83,2866;UID=Read_Only;
DATABASE=DW_Full;Pwd=Read_Only"))
test
test <- suppressWarnings(try(odbcDriverConnect("DRIVER={SQL Native Client};
SERVER=205.155.75.83,2866;UID=Read_Only;
DATABASE=DW_Full;Pwd=Read_Only")))
test
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
grabMetaData()
library(devtools)
install_github("shiny","alexbbrown",ref="password-field")
library(shiny)
library(ggvis)
library(shiny)
library(dplyr)
%.%
lead(1:10, 1)
lead(1:10, 2)
lead
by_cyl <- group_by(mtcars, cyl)
models <- by_cyl %>% do(
mod_linear = lm(mpg ~ disp, data = .),
mod_quad = lm(mpg ~ poly(disp, 2), data = .)
)
View(models)
lapply(models$mod_linear, summary)
groups(by_cyl)
str(by_cycl)
str(by_cyl)
library(shiny)
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
library(ggvis)
library(ggvis)
library(algaeIBI)
library(algaeMetrics)
dat <- read.csv("algae.test.2.csv", stringsAsFactors=FALSE)
res <- algae.IBIs(dat)
res %>%
select(SampleID, S2, D18, H20) %>%
melt("SampleID") %>%
ggvis(~variable) %>%
layer_bars(stack=FALSE)
library(reshape2)
res %>%
select(SampleID, S2, D18, H20) %>%
melt("SampleID") %>%
ggvis(~variable) %>%
layer_bars(stack=FALSE)
res %>%
select(SampleID, S2, D18, H20) %>%
melt("SampleID")
res %>%
select(SampleID, S2, D18, H20) %>%
melt("SampleID") %>%
ggvis(~variable) %>%
layer_points()
res %>%
select(SampleID, S2, D18, H20) %>%
melt("SampleID")
res %>%
select(SampleID, S2, D18, H20) %>%
melt("SampleID") %>%
ggvis(~variable, ~value) %>%
layer_points()
res %>%
select(SampleID, S2, D18, H20) %>%
melt("SampleID") %>%
ggvis(~variable, ~value, colour := ~SampleID) %>%
layer_points()
res %>%
select(SampleID, S2, D18, H20) %>%
melt("SampleID") %>%
ggvis(~variable, ~value, color := ~SampleID) %>%
layer_points()
res %>%
select(SampleID, S2, D18, H20) %>%
melt("SampleID") %>%
ggvis(~variable, ~value, fill := ~SampleID) %>%
layer_points()
mtcars %>% ggvis(~mpg, ~wt, fill = ~cyl)
res %>%
select(SampleID, S2, D18, H20) %>%
melt("SampleID") %>%
ggvis(~variable, ~value, fill := ~as.factor(SampleID)) %>%
layer_points()
res %>%
select(SampleID, S2, D18, H20) %>%
melt("SampleID") %>%
ggvis(~variable, ~value, fill := ~factor(SampleID)) %>%
layer_points()
res %>%
select(SampleID, S2, D18, H20) %>%
melt("SampleID") %>%
ggvis(~variable, ~value, fill = ~factor(SampleID)) %>%
layer_points()
res %>%
select(SampleID, S2, D18, H20) %>%
melt("SampleID") %>%
ggvis(~variable, ~value, fill = ~SampleID) %>%
layer_points()
res %>%
select(SampleID, S2, D18, H20) %>%
melt("SampleID") %>%
ggvis(~variable, ~value, fill = ~SampleID) %>%
layer_points() %>% layer_lines()
res %>%
select(SampleID, S2, D18, H20) %>%
melt("SampleID") %>%
ggvis(~variable, ~value, fill = ~SampleID) %>%
layer_points() %>% layer_path()
res %>%
select(SampleID, S2, D18, H20) %>%
melt("SampleID") %>%
ggvis(~variable, ~value, fill = ~SampleID) %>%
layer_points() %>% layer_paths()
res %>%
select(SampleID, S2, D18, H20) %>%
melt("SampleID") %>%
ggvis(~variable, ~value, fill = ~SampleID) %>%
layer_lines()
res %>%
select(SampleID, S2, D18, H20) %>%
melt("SampleID") %>%
ggvis(~variable, ~value, stroke = ~SampleID) %>%
layer_lines()
res %>%
select(SampleID, S2, D18, H20) %>%
melt("SampleID") %>%
ggvis(~variable, ~value, stroke = ~SampleID) %>%
layer_lines() %>%
layer_points(fill = ~SampleID)
NULL %>%
select(SampleID, S2, D18, H20) %>%
melt("SampleID") %>%
ggvis(~variable, ~value, stroke = ~SampleID) %>%
layer_lines() %>%
layer_points(fill = ~SampleID)
%>%
select(SampleID, S2, D18, H20) %>%
melt("SampleID") %>%
ggvis(~variable, ~value, stroke = ~SampleID) %>%
layer_lines() %>%
layer_points(fill = ~SampleID)
res %>%
select(SampleID, S2, D18, H20) %>%
melt("SampleID") %>%
ggvis(~variable, ~value, stroke = ~SampleID) %>%
layer_lines() %>%
layer_points(fill = ~SampleID)
res %>%
select(SampleID, S2, D18, H20) %>%
melt("SampleID") %>%
ggvis(~variable, ~value, stroke = ~SampleID) %>%
layer_lines() %>%
layer_points(fill = ~SampleID) %>%
add_axis("x", title = "IBI") %>%
add_axis("y", title = "Score")
res %>%
select(SampleID, S2, D18, H20) %>%
melt("SampleID")
res %>%
select(SampleID, S2, D18, H20) %>%
melt("SampleID") %>%
filter(!is.na(value)) %>%
ggvis(~variable, ~value, stroke = ~SampleID) %>%
layer_lines() %>%
layer_points(fill = ~SampleID) %>%
add_axis("x", title = "IBI") %>%
add_axis("y", title = "Score")
seq(1, 100, by=10)
seq(0, 100, by=10)
res %>%
select(SampleID, S2, D18, H20) %>%
melt("SampleID") %>%
filter(!is.na(value)) %>%
ggvis(~variable, ~value, stroke = ~SampleID) %>%
layer_lines() %>%
layer_points(fill = ~SampleID) %>%
add_axis("x", title = "IBI") %>%
add_axis("y", title = "Score", values=seq(0, 100, by=10))
res %>%
select(SampleID, S2, D18, H20) %>%
melt("SampleID") %>%
filter(!is.na(value)) %>%
ggvis(~variable, ~value, stroke = ~SampleID) %>%
layer_lines() %>%
layer_points(fill = ~SampleID) %>%
add_axis("x", title = "IBI") %>%
add_axis("y", title = "Score", values=seq(0, 100, by=10), grid=TRUE)
res %>%
select(SampleID, S2, D18, H20) %>%
melt("SampleID") %>%
filter(!is.na(value)) %>%
ggvis(~variable, ~value, stroke = ~SampleID) %>%
layer_lines() %>%
layer_points(fill = ~SampleID) %>%
add_axis("x", title = "IBI") %>%
add_axis("y", title = "Score", values=seq(0, 100, by=10)) %>%
scale_numeric("y", domain=c(0, 100))
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
observe_ggvis
runApp(".")
runApp(".")
nrow(NULL)
nrow(NULL) > 0
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
?bind_shiny
runApp(".")
runApp(".")
runApp(".")
runApp(".")
shiny::getDefaultReactiveDomain()
runApp(".")
nrow("error")
data.frame("SampleID" = NULL, "variable" = NULL, "value" = "NULL")
data.frame("SampleID" = NULL, "variable" = NULL, "value" = NULL)
data.frame("SampleID" = NULL, "variable" = NULL, "value" = NULL)
runApp(".")
data.frame("SampleID" = NULL, "S2" = NULL,
"D18" = NULL, "H20" = NULL)
data.frame("SampleID" = NA, "S2" = NA,
"D18" = NA, "H20" = NA))
data.frame("SampleID" = NA, "S2" = NA,
"D18" = NA, "H20" = NA)
runApp(".")
runApp(".")
runApp(".")
nrow(NULL)
nrow(NULL) > 0
if(logical(0))
"Test"
if(is.null(NULL))"test"
runApp(".")
dat <- data.frame("SampleID" = NA, "S2" = NA,
"D18" = NA, "H20" = NA)
dat %>%
select(SampleID, S2, D18, H20) %>%
melt("SampleID") %>%
filter(!is.na(value)) %>%
ggvis(~variable, ~value, stroke = ~SampleID) %>%
layer_lines() %>%
layer_points(fill = ~SampleID) %>%
add_axis("x", title = "IBI") %>%
add_axis("y", title = "Score", values=seq(0, 100, by=10)) %>%
scale_numeric("y", domain=c(0, 100))
dat %>%
select(SampleID, S2, D18, H20) %>%
melt("SampleID") %>%
filter(!is.na(value)) %>%
ggvis(~variable, ~value, stroke = ~SampleID) %>%
layer_lines() %>%
layer_points(fill = ~SampleID)
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
library(CSCI
)
runApp(".")
?br
runApp(".")
library(shiny)
runApp(".")
dput(tolower(           'THIS SOFTWARE AND ITS DOCUMENTATION ARE IN THE PUBLIC DOMAIN AND ARE FURNISHED BY SOUTHERN CALIFORNIA COASTAL WATER RESEARCH PROJECT AUTHORITY "AS IS." THE AUTHORS, SOUTHERN CALIFORNIA COASTAL WATER RESEARCH PROJECT AUTHORITY, ITS INSTRUMENTALITIES, OFFICERS, EMPLOYEES, AND AGENTS MAKE NO WARRANTIES, EXPRESS OR IMPLIED, AS TO THE USEFULNESS OF THE SOFTWARE AND DOCUMENTATION FOR ANY PURPOSE. THEY ALSO ASSUME NO RESPONSIBILITY (1) FOR THE USE OF THE SOFTWARE AND DOCUMENTATION; OR (2) TO PROVIDE TECHNICAL SUPPORT TO USERS.'
))
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
library(RSQLite)
con <- dbConnect("SQLite", "emailDB")
sqliteReadTable(con, "email")
runApp(".")
runApp(".")
runApp(".")
conditionalPanel(condition="input.submit > 0 && $('html').hasClass('shiny-busy')",
h5("Processing data. Please wait."))
library(devtools)
install_github("algaeMetrics", "mengeln")
runApp(".")
options(shiny.maxRequestSize=30*1024^2)
1024^2
30*1024^2
library(shiny)
runApp(".")
Sys.getenv('SHINY_PORT') == ""
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
library(algaeMetrics)
algae.IBIs
D18
calcD18
algaeMetrics:::calcD18
library(devtools)
install_github("algaeMetrics", "mengeln")
library(algaeMetrics)
algae.IBIs
taxonInfo
library(shiny)
?tag
?HTML
?script
?includeScript
library(rsconnect)
deployApp()
